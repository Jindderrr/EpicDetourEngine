Авторы: Слизков Максим, Цымбал Семён.
Описание:
В проект входит: Epic Detour Engine - псевдо-3D движок, основанный на технологии Ray-casting и техно-демка этого движка в жанре "Шутер от первого лица".

-----------------------------------------------------------------------------------------

В Version 0.3.0 добавлено:

Панель разработчика:
1-ое нажатие на '~': показывает FPS
2-ое нажатие на '~': показывает подробные сведения

Добавлен 'culling' (метод отставки от рендера стен, не попадающих в угл обзора камеры)
Добавлено динамическое разрешение (разрешение рендера понижается и повышается, в зависимости от FPS)
Добавлено одноцветность дальних текстур (текстура на большом расстоянии становятся одного цвета, экономя ресурсы)
Добавлена функция 'NormalizeRotation' (описание в кратком описание функций и классов)
Добавлена функция OpenOBJAsMap, для чтения карты из .obj файлов (описание в кратком описание функций и классов)
Добавлен класс 'Actor', отвечающий за все обьекты с собственным кодом (описание в кратком описание функций и классов)
Добавлен класс 'InBoxDetector', отвечающий за обнаружение обьектов класс 'Tracker' (описание в кратком описание функций и классов)
Добавлен класс 'Tracker' (описание в кратком описание функций и классов)
и другие мелкие изменения

---Данное обновление является beta версией 0.3.1, в котором OpenOBJAsMap и Actor будут улучшены---

=========================================================================================

В Version 0.2 добавлено:

Текстуры, многопоточность, кординаты и размер обьектов по вертикали, возможность привязывать функцию к событию до и после рендера (каждый кадр)

-----------------------------------------------------------------------------------------

Ниже - краткое описание функций и классов:

Material: класс, который содержит параметры материала, такие как цвет/текстура, а в будующем также, возможно, будет содержать прозрачность и зеркальность.

RotationToVector: функция преобразует угол в вектор.

NormalizeRotation: функция нормализует угол поворота, приводя его к значениям от 0 до 360

RotatePointAroundPoint: функция проварачивает точку вокруг другой точки, на указанное количество градусов.

FindLookAtRotation: функция находит угол между двумя точками.

Camera: класс, ссылку на экземпляр которого надо записать в переменную ActiveCamera, из необычных параметров содержит: угл поворота и FOV(угол обзора).

Wall: класс, экземпляр которого сам, по умолчанию, добавляет себя в AllWalls и создаёт WallCollision, добавляя его в AllWallCollision, представляет из себя "стену" или друг плоский, вертикальный, прямоугольный обьект.

WallBox: класс, который создаёт куб из стен(Wall), с центром в Location и стороной a, возращает ссылки на четыре созданные стены, не добавляя их в AllWalls.

WallCollision: класс, который в будующем будет использоваться для расчёта колизий.

CircleCollisionMove: функция, которая в будующем будеи использоваться для передвижения игрока и ботов(кругов), с учотом колизий стен (WallCollision).

SpriteFaceToCamera: класс, который всегда находится "лицом" к ActiveCamera, параметр 'a', отвечающий за ширину сработает только если в качестве материала был передан материал, не содержащий текстуру, иначе ширина будет высчитана автоматичиски, исходи из высоты обьекта и соотношения сторон текстуры из материала.

NormalizeVector: функция, которая нормализует вектор, приводя его длину к 1.

Item: класс, который в себе может содержать множество стен, нужен для удобного их перемещения и вращения вместе.

OpenOBJAsMap: функция, которая открывает карту из .obj файла, возраща неопознанные типы объектов.

Actor: класс, который представляет из себя все объекты, с собственным кодом (двери, враги, лут и тд), который состаит из 'компонентов'.

Tracker: класс 'компонент', который добаляется к классам, наследуемые от actor, которые должны обнароживаться экземплярами 'InBoxDetector'.

InBoxDetector: класс 'компонент', отвечающий за обнаружение обьектов класс 'Tracker'.

Base_FirstPersonCharacter: класс, который представляет из себя базового персонажа, который может быть полезен в любой игре от первого лица, с реализованым перемещением и поворотом камеры.

LinePrint: функция, которая отрисовывает отдельную полоску экрана (шириной - 'size').

ThreadSection: функция, которая отрисовывает отдельную область экрана, в которую входит множество полос размером 'size'.

CheackWallsForRender: функция, которая возвращает только те стены, которы входят в угл обзора 'ActiveCamera'

Rendering: функция, отвечающая за отображения на экране псевдо-3D пространства, а точнее - разделение экрана на области (ThreadSection) и раздачи задач разным потокам.

IntersectionPoint: функция, которая находит точку пересечения двух отрезков, если она есть.

EventTickClass: класс, отвечающий за вызов всех функций привязанных к вызову каждый кадр и каждый кадр после рендеринга псевдо-3D пространства.

Run: функция, которая должна быть вызвана для начала игрового цикла